#layer {
#  name: "data"
#  type: "HDF5Data"
#  top: "data_1"
#  top: "label"
#  #mean_file: "ucf101_train_mean.binaryproto"
#  hdf5_data_param {
#    source: "train_list.txt"
#    batch_size: 10
#    #new_height: 128
#    #new_width: 171
#    #new_length: 16
##    shuffle: true
#  }
#  include {
#    phase: TRAIN
#  }
##  transform_param {
# #   crop_size: 112
# #   mirror: true
# # }
#}
#layer {
#  name: "data"
#  type: "HDF5Data"
#  top: "data_1"
#  top: "label"
#  hdf5_data_param {
#    source: "test_list.txt"
#    batch_size: 10
#    #new_height: 128
#    #new_width: 171
#    #new_length: 16
#    #shuffle: true
##    mean_file: "ucf101_train_mean.binaryproto"
#  }
#  include {
#    phase: TEST
#  #  stage: "test-on-val"
#  }
##  transform_param {
##    crop_size: 112
##    mirror: false
##  }
#}


layer {
 name:"data"
 type:"HDF5Data"
 top:"data_1"
# input_param{shape:{dim:20 dim:3 dim:16 dim:112 dim:112}}
 hdf5_data_param {
    source: "testlist/testlist_Chinese_new_year_nyc_2016.txt"
    batch_size: 40
 }

}
#layer {
# name:"data"
# type:"Input"
# top:"data_2"
# input_param{shape:{dim:1 dim:3 dim:16 dim:112 dim:112}}
#}

# ----- 1st group -----
layer {
  name: "conv1a"
  type: "NdConvolution"
  bottom: "data_1"
  top: "conv1a"
  param {
    name: "conv1a_w"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    name:"conv1a_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_shape { dim: 3 dim: 3 dim: 3 }
    stride_shape { dim: 1 dim: 1 dim: 1 }
    pad_shape    { dim: 1 dim: 1 dim: 1 }
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1a"
  type: "ReLU"
  bottom: "conv1a"
  top: "conv1a"
}
layer {
  name: "pool1"
  type: "NdPooling"
  bottom: "conv1a"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_shape { dim: 1 dim: 2 dim: 2 }
    stride_shape { dim: 1 dim: 2 dim: 2 }
  }
}

# ----- 2nd group -----
layer {
  name: "conv2a"
  type: "NdConvolution"
  bottom: "pool1"
  top: "conv2a"
  param {
    name:"conv2a_w"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    name:"conv2a_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_shape { dim: 3 dim: 3 dim: 3 }
    stride_shape { dim: 1 dim: 1 dim: 1 }
    pad_shape    { dim: 1 dim: 1 dim: 1 }
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2a"
  type: "ReLU"
  bottom: "conv2a"
  top: "conv2a"
}
layer {
  name: "pool2"
  type: "NdPooling"
  bottom: "conv2a"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_shape { dim: 2 dim: 2 dim: 2 }
    stride_shape { dim: 2 dim: 2 dim: 2 }
  }
}

# ----- 3rd group -----
layer {
  name: "conv3a"
  type: "NdConvolution"
  bottom: "pool2"
  top: "conv3a"
  param {
    name:"conv3a_w"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    name:"conv3a_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_shape { dim: 3 dim: 3 dim: 3 }
    stride_shape { dim: 1 dim: 1 dim: 1 }
    pad_shape    { dim: 1 dim: 1 dim: 1 }
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu3a"
  type: "ReLU"
  bottom: "conv3a"
  top: "conv3a"
}
layer {
  name: "pool3"
  type: "NdPooling"
  bottom: "conv3a"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_shape { dim: 2 dim: 2 dim: 2 }
    stride_shape { dim: 2 dim: 2 dim: 2 }
  }
}

# ----- 4th group -----
layer {
  name: "conv4a"
  type: "NdConvolution"
  bottom: "pool3"
  top: "conv4a"
  param {
    name:"conv4a_w"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    name:"conv4a_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_shape { dim: 3 dim: 3 dim: 3 }
    stride_shape { dim: 1 dim: 1 dim: 1 }
    pad_shape    { dim: 1 dim: 1 dim: 1 }
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4a"
  type: "ReLU"
  bottom: "conv4a"
  top: "conv4a"
}
layer {
  name: "pool4"
  type: "NdPooling"
  bottom: "conv4a"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_shape { dim: 2 dim: 2 dim: 2 }
    stride_shape { dim: 2 dim: 2 dim: 2 }
  }
}

# ----- 5th group -----
layer {
  name: "conv5a"
  type: "NdConvolution"
  bottom: "pool4"
  top: "conv5a"
  param {
    name:"conv5a_w"
    lr_mult: 0.1
    decay_mult: 0.1
  }
  param {
    name:"conv5a_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_shape { dim: 3 dim: 3 dim: 3 }
    stride_shape { dim: 1 dim: 1 dim: 1 }
    pad_shape    { dim: 1 dim: 1 dim: 1 }
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5a"
  type: "ReLU"
  bottom: "conv5a"
  top: "conv5a"
}
layer {
  name: "pool5"
  type: "NdPooling"
  bottom: "conv5a"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_shape { dim: 2 dim: 2 dim: 2 }
    stride_shape { dim: 2 dim: 2 dim: 2 }
  }
}

# ----- 1st fc group -----
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    name:"fc6_w"
    lr_mult: 0.1
    decay_mult:0.1
  }
  param {
    name:"fc6_b"
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
#layer {
#  name: "drop6"
#  type: "Dropout"
#  bottom: "fc6"
#  top: "fc6"
#  dropout_param {
#    dropout_ratio: 0.5
#  }
#}
layer {
  name: "reduct1"
  type: "Reduction"
  bottom: "fc6"
  top: "reduct1"
  reduction_param {
    operation: SUMSQ
    axis: 1
  }
}

layer {
  name: "power1"
  type: "Power"
  bottom: "reduct1"
  top: "power1"
  power_param {
    power: -0.5
    shift: 1e-12
  }
}
layer {
  name: "reshape1"
  type: "Reshape"
  bottom: "power1"
  top: "reshape1"
  reshape_param {
    shape {
      dim: 1
    }
    axis: -1
    num_axes: 0
  }
}
layer {
  name: "tile1"
  type: "Tile"
  bottom: "reshape1"
  top: "tile1"
  tile_param {
    axis: 1
    tiles:2048
  }
}
layer {
  name: "norm"
  type: "Eltwise"
  bottom: "fc6"
  bottom: "tile1"
  top: "norm"
  eltwise_param {
    operation: PROD
  }
}

# ----- siamese part 2 -----
## ----- 1st group -----
#
#layer {
#  name: "data_p"
#  type: "HDF5Data"
#  top: "data_2"
#  top: "sim"
#  hdf5_data_param {
#    source: "train_list.txt"
#    batch_size: 10
#    #new_height: 128
#    #new_width: 171
#    #new_length: 16
#    #shuffle: true
#  #  mean_file: "ucf101_train_mean.binaryproto"
#  }
#  include {
#    phase: TRAIN
#  }
# # transform_param {
# #   crop_size: 112
# #   mirror: true
# # }
#}
## ----- for validation
##layer {
##  name: "data_p"
##  type: "VideoData"
##  top: "data_p"
##  top: "sim"
##  video_data_param {
##    source: "ucf_siamiese_test2.txt"
##    batch_size: 5
##    new_height: 128
##    new_width: 171
##    new_length: 16
##    shuffle: true
##  }
##  include {
##    phase: TEST
##    stage: "test-on-train"
##  }
##  transform_param {
##    crop_size: 112
##    mirror: false
##    mean_file: "ucf101_train_mean.binaryproto"
##  }
##}
#layer {
#  name: "data_p"
#  type: "HDF5Data"
#  top: "data_2"
#  top: "sim"
#  hdf5_data_param {
#    source: "test_list.txt"
#    batch_size: 10
# #   new_height: 128
# #   new_width: 171
# #   new_length: 16
#    #shuffle: true
#   # mean_file: "ucf101_train_mean.binaryproto"
#  }
#  include {
#    phase: TEST
#   # stage: "test-on-val"
#  }
#  #transform_param {
#  #  crop_size: 112
#  #  mirror: false
#  #}
#}
#layer {
#  name: "conv1a_p"
#  type: "NdConvolution"
#  bottom: "data_2"
#  top: "conv1a_p"
#  param {
#    name:"conv1a_w"
#    lr_mult: 0.1
#    decay_mult: 0.1
#  }
#  param {
#    name:"conv1a_b"
#    lr_mult: 0.2
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 64
#    kernel_shape { dim: 3 dim: 3 dim: 3 }
#    stride_shape { dim: 1 dim: 1 dim: 1 }
#    pad_shape    { dim: 1 dim: 1 dim: 1 }
#    weight_filler {
#      type: "gaussian"
#      std: 0.01
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#layer {
#  name: "relu1a_p"
#  type: "ReLU"
#  bottom: "conv1a_p"
#  top: "conv1a_p"
#}
#layer {
#  name: "pool1_p"
#  type: "NdPooling"
#  bottom: "conv1a_p"
#  top: "pool1_p"
#  pooling_param {
#    pool: MAX
#    kernel_shape { dim: 1 dim: 2 dim: 2 }
#    stride_shape { dim: 1 dim: 2 dim: 2 }
#  }
#}
#
## ----- 2nd group -----
#layer {
#  name: "conv2a_p"
#  type: "NdConvolution"
#  bottom: "pool1_p"
#  top: "conv2a_p"
#  param {
#    name:"conv2a_w"
#    lr_mult: 0.1
#    decay_mult: 0.1
#  }
#  param {
#    name:"conv2a_b"
#    lr_mult: 0.2
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 128
#    kernel_shape { dim: 3 dim: 3 dim: 3 }
#    stride_shape { dim: 1 dim: 1 dim: 1 }
#    pad_shape    { dim: 1 dim: 1 dim: 1 }
#    weight_filler {
#      type: "gaussian"
#      std: 0.01
#    }
#    bias_filler {
#      type: "constant"
#      value: 1
#    }
#  }
#}
#layer {
#  name: "relu2a_p"
#  type: "ReLU"
#  bottom: "conv2a_p"
#  top: "conv2a_p"
#}
#layer {
#  name: "pool2_p"
#  type: "NdPooling"
#  bottom: "conv2a_p"
#  top: "pool2_p"
#  pooling_param {
#    pool: MAX
#    kernel_shape { dim: 2 dim: 2 dim: 2 }
#    stride_shape { dim: 2 dim: 2 dim: 2 }
#  }
#}
#
## ----- 3rd group -----
#layer {
#  name: "conv3a_p"
#  type: "NdConvolution"
#  bottom: "pool2_p"
#  top: "conv3a_p"
#  param {
#    name:"conv3a_w"
#    lr_mult: 0.1
#    decay_mult: 0.1
#  }
#  param {
#    name:"conv3a_b"
#    lr_mult: 0.2
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 256
#    kernel_shape { dim: 3 dim: 3 dim: 3 }
#    stride_shape { dim: 1 dim: 1 dim: 1 }
#    pad_shape    { dim: 1 dim: 1 dim: 1 }
#    weight_filler {
#      type: "gaussian"
#      std: 0.01
#    }
#    bias_filler {
#      type: "constant"
#      value: 1
#    }
#  }
#}
#layer {
#  name: "relu3a_p"
#  type: "ReLU"
#  bottom: "conv3a_p"
#  top: "conv3a_p"
#}
#layer {
#  name: "pool3_p"
#  type: "NdPooling"
#  bottom: "conv3a_p"
#  top: "pool3_p"
#  pooling_param {
#    pool: MAX
#    kernel_shape { dim: 2 dim: 2 dim: 2 }
#    stride_shape { dim: 2 dim: 2 dim: 2 }
#  }
#}
#
## ----- 4th group -----
#layer {
#  name: "conv4a_p"
#  type: "NdConvolution"
#  bottom: "pool3_p"
#  top: "conv4a_p"
#  param {
#    name:"conv4a_w"
#    lr_mult: 0.1
#    decay_mult: 0.1
#  }
#  param {
#    name:"conv4a_b"
#    lr_mult: 0.2
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 256
#    kernel_shape { dim: 3 dim: 3 dim: 3 }
#    stride_shape { dim: 1 dim: 1 dim: 1 }
#    pad_shape    { dim: 1 dim: 1 dim: 1 }
#    weight_filler {
#      type: "gaussian"
#      std: 0.01
#    }
#    bias_filler {
#      type: "constant"
#      value: 1
#    }
#  }
#}
#layer {
#  name: "relu4a_p"
#  type: "ReLU"
#  bottom: "conv4a_p"
#  top: "conv4a_p"
#}
#layer {
#  name: "pool4_p"
#  type: "NdPooling"
#  bottom: "conv4a_p"
#  top: "pool4_p"
#  pooling_param {
#    pool: MAX
#    kernel_shape { dim: 2 dim: 2 dim: 2 }
#    stride_shape { dim: 2 dim: 2 dim: 2 }
#  }
#}
#
## ----- 5th group -----
#layer {
#  name: "conv5a_p"
#  type: "NdConvolution"
#  bottom: "pool4_p"
#  top: "conv5a_p"
#  param {
#    name:"conv5a_w"
#    lr_mult: 0.1
#    decay_mult: 0.1
#  }
#  param {
#    name:"conv5a_b"
#    lr_mult: 0.2
#    decay_mult: 0
#  }
#  convolution_param {
#    num_output: 256
#    kernel_shape { dim: 3 dim: 3 dim: 3 }
#    stride_shape { dim: 1 dim: 1 dim: 1 }
#    pad_shape    { dim: 1 dim: 1 dim: 1 }
#    weight_filler {
#      type: "gaussian"
#      std: 0.01
#    }
#    bias_filler {
#      type: "constant"
#      value: 1
#    }
#  }
#}
#layer {
#  name: "relu5a_p"
#  type: "ReLU"
#  bottom: "conv5a_p"
#  top: "conv5a_p"
#}
#layer {
#  name: "pool5_p"
#  type: "NdPooling"
#  bottom: "conv5a_p"
#  top: "pool5_p"
#  pooling_param {
#    pool: MAX
#    kernel_shape { dim: 2 dim: 2 dim: 2 }
#    stride_shape { dim: 2 dim: 2 dim: 2 }
#  }
#}
#
## ----- 1st fc group -----
#layer {
#  name: "fc6_p"
#  type: "InnerProduct"
#  bottom: "pool5_p"
#  top: "fc6_p"
#  param {
#    name:"fc6_w"
#    lr_mult: 0.1
#    decay_mult: 0.1
#  }
#  param {
#    name:"fc6_b"
#    lr_mult: 0.2
#    decay_mult: 0
#  }
#  inner_product_param {
#    num_output: 2048
#    weight_filler {
#      type: "gaussian"
#      std: 0.005
#    }
#    bias_filler {
#      type: "constant"
#      value: 1
#    }
#  }
#}
#layer {
#  name: "relu6_p"
#  type: "ReLU"
#  bottom: "fc6_p"
#  top: "fc6_p"
#}
##layer {
##  name: "drop6_p"
##  type: "Dropout"
##  bottom: "fc6_p"
##  top: "fc6_p"
##  dropout_param {
##    dropout_ratio: 0.5
##  }
##}
#layer {
#  name: "reduct_p"
#  type: "Reduction"
#  bottom: "fc6_p"
#  top: "reduct_p"
#  reduction_param {
#    operation: SUMSQ
#    axis: 1
#  }
#}
#
#layer {
#  name: "power_p"
#  type: "Power" 
#  bottom: "reduct_p"
#  top: "power_p"
#  power_param {
#    power: -0.5
#    shift: 1e-12
#  } 
#} 
#layer {
#  name: "reshape_p"
#  type: "Reshape"
#  bottom: "power_p"
#  top: "reshape_p"
#  reshape_param {
#    shape {
#      dim: 1
#    } 
#    axis: -1
#    num_axes: 0
#  }
#}
#layer {
#  name: "tile_p"
#  type: "Tile"
#  bottom: "reshape_p"
#  top: "tile_p"
#  tile_param {
#    axis: 1
#    tiles:2048
#  }
#}
#layer {
#  name: "norm_p"
#  type: "Eltwise"
#  bottom: "fc6_p"
#  bottom: "tile_p"
#  top: "norm_p"
#  eltwise_param {
#    operation: PROD
#  }
#}
#layer {
#   name :"concate1"
#   type :"Concat"
#   bottom :"norm"
#   bottom :"norm_p"
#   top :"concate1"
#   concat_param: {
#	axis: 1
#}
#   
#}
#
#layer {
#   name :"full_concat1"
#   type: "InnerProduct"
#   bottom: "concate1"
#   top: "full_concat1"
#   inner_product_param {
#    num_output: 1024
#    weight_filler {
#      type: "xavier"
#    }
#  } 
# 
#}
#layer {
#  name: "relu_full1"
#  type: "ReLU"
#  bottom: "full_concat1"
#  top: "full_concat1"
#}
##layer {
##  name: "drop1"
##  type: "Dropout"
##  bottom: "full_concat1"
##  top: "full_concat1"
##  dropout_param {
##    dropout_ratio: 0.5
##  }
##}
##
#
#layer {
#   name :"full_concat2"
#   type: "InnerProduct"
#   bottom: "full_concat1"
#   top: "full_concat2"
#   inner_product_param {
#      num_output: 1024
#      weight_filler {
#      type: "xavier"
#    }
#   }
#}
#layer {
#  name: "relu_full2"
#  type: "ReLU"
#  bottom: "full_concat2"
#  top: "full_concat2"
#}
##layer {
##  name: "drop2"
##  type: "Dropout"
##  bottom: "full_concat2"
##  top: "full_concat2"
##  dropout_param {
##    dropout_ratio: 0.5
##  }
##}
#
#layer {
#   name :"full_concat3"
#   type: "InnerProduct"
#   bottom: "full_concat2"
#   top: "full_concat3"
#   inner_product_param {
#    num_output: 2
#    weight_filler {
#      type: "xavier"
#    }
#  }
#
#}
#layer {
#  name: "prob"
#  type: "Softmax"
#  bottom: "full_concat3"
#  top: "prob"
#  include {
#    phase: TEST
#  }
#}
#layer {
#  name: "loss"
#  type: "SigmoidCrossEntropyLoss"
#  bottom: "full_concat3"
#  bottom: "sim"
#  top: "loss"
#}
